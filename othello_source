#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

const int BOARD_SIZE = 8;
const char EMPTY = '.';
const char BLACK = 'B';
const char WHITE = 'W';

//盤面操作およびオセロルールのクラス
class Board {
public:
    Board() : board(BOARD_SIZE, std::vector<char>(BOARD_SIZE, EMPTY)) {
        // 初期盤面
        board[BOARD_SIZE / 2 - 1][BOARD_SIZE / 2 - 1] = WHITE;
        board[BOARD_SIZE / 2 - 1][BOARD_SIZE / 2] = BLACK;
        board[BOARD_SIZE / 2][BOARD_SIZE / 2 - 1] = BLACK;
        board[BOARD_SIZE / 2][BOARD_SIZE / 2] = WHITE;
    }

    void printBoard() const {
        std::cout << "  ";
        for (int i = 1; i <= BOARD_SIZE; ++i) {
            std::cout << i << " ";
        }
        std::cout << std::endl;

        for (int i = 0; i < BOARD_SIZE; ++i) {
            std::cout << (i + 1) << " ";
            for (const auto& cell : board[i]) {
                std::cout << cell << " ";
            }
            std::cout << std::endl;
        }
    }

    bool isValidMove(int row, int col, char player) const {
        if (board[row][col] != EMPTY) return false;

        std::vector<std::pair<int, int>> directions = { {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1} };
        char opponent = (player == BLACK) ? WHITE : BLACK;

        for (const auto& dir : directions) {
            int r = row + dir.first;
            int c = col + dir.second;
            bool hasOpponentPiece = false;

            while (r >= 0 && r < BOARD_SIZE && c >= 0 && c < BOARD_SIZE) {
                if (board[r][c] == opponent) {
                    hasOpponentPiece = true;
                }
                else if (board[r][c] == player && hasOpponentPiece) {
                    return true;
                }
                else {
                    break;
                }
                r += dir.first;
                c += dir.second;
            }
        }
        return false;
    }
    //駒を置いて、ひっくり返す関数（特殊ルール適用）
    void makeMove(int row, int col, char player) {
        board[row][col] = player;

        std::vector<std::pair<int, int>> directions = { {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1} };
        char opponent = (player == BLACK) ? WHITE : BLACK;

        for (const auto& dir : directions) {
            int r = row + dir.first;
            int c = col + dir.second;
            std::vector<std::pair<int, int>> toFlip;//挟まれた駒の格納
            std::vector<std::pair<int, int>> selfPieces;//挟むのに使った駒の格納
            bool hasOpponentPiece = false;

            while (r >= 0 && r < BOARD_SIZE && c >= 0 && c < BOARD_SIZE) {
                if (board[r][c] == opponent) {
                    toFlip.push_back({ r, c });
                    hasOpponentPiece = true;
                }
                else if (board[r][c] == player && hasOpponentPiece) {
                    selfPieces.push_back({ r, c });
                    for (const auto& p : toFlip) {
                        board[p.first][p.second] = player;
                    }
                    for (const auto& p : selfPieces) {
                        board[p.first][p.second] = opponent;
                    }
                    break;
                }
                else {
                    break;
                }
                r += dir.first;
                c += dir.second;
            }
        }
    }

    bool hasValidMove(char player) const {
        for (int i = 0; i < BOARD_SIZE; ++i) {
            for (int j = 0; j < BOARD_SIZE; ++j) {
                if (isValidMove(i, j, player)) {
                    return true;
                }
            }
        }
        return false;
    }

    std::vector<std::pair<int, int>> getValidMoves(char player) const {
        std::vector<std::pair<int, int>> validMoves;
        for (int i = 0; i < BOARD_SIZE; ++i) {
            for (int j = 0; j < BOARD_SIZE; ++j) {
                if (isValidMove(i, j, player)) {
                    validMoves.push_back({ i, j });
                }
            }
        }
        return validMoves;
    }

    int countScore(char player) const {
        int score = 0;
        for (int i = 0; i < BOARD_SIZE; ++i) {
            for (int j = 0; j < BOARD_SIZE; ++j) {
                if (board[i][j] == player) {
                    ++score;
                }
            }
        }
        return score;
    }

private:
    std::vector<std::vector<char>> board;
};

//ゲームモードの選択、プレイヤーとCPUの操作、勝敗判定などのゲーム進行のクラス
class OthelloGame {
public:
    OthelloGame() : board(), currentPlayer(BLACK), gameEnded(false) {
        std::srand(static_cast<unsigned int>(std::time(0)));
    }

    void selectMode() {
        int choice;
        while (true) {
            std::cout << "ゲームモードを選択してください:\n";
            std::cout << "1. プレイヤー対プレイヤー\n";
            std::cout << "2. プレイヤー対CPU\n";
            std::cout << "3. CPU対CPU\n";
            std::cout << "選択肢を入力してください: ";
            std::cin >> choice;

            switch (choice) {
            case 1:
                mode = Mode::PLAYER_VS_PLAYER;
                break;
            case 2:
                mode = Mode::PLAYER_VS_CPU;
                break;
            case 3:
                mode = Mode::CPU_VS_CPU;
                break;
            default:
                clearScreen();
                std::cout << "無効な選択です。もう一度選択してください。" << std::endl;
                continue; // 無効な選択の場合、ループの先頭に戻る
            }
            break; // 有効な選択が行われた場合、ループを終了
        }
    }

    void play() {
        selectMode();

        while (!gameEnded) {
            clearScreen();
            board.printBoard();

            if (!message.empty()) {
                std::cout << message << std::endl;
            }

            switch (mode) {
            case Mode::PLAYER_VS_PLAYER:
                playerTurn();
                break;
            case Mode::PLAYER_VS_CPU:
                if (currentPlayer == BLACK) {
                    playerTurn();
                }
                else {
                    cpuTurn();
                }
                break;
            case Mode::CPU_VS_CPU:
                cpuTurn();
                break;
            }
        }

        clearScreen();
        board.printBoard();
        printGameResult();
    }

private:
    enum class Mode { PLAYER_VS_PLAYER, PLAYER_VS_CPU, CPU_VS_CPU };

    void playerTurn() {
        if (board.hasValidMove(currentPlayer)) {
            int row, col;
            std::cout << "Player " << currentPlayer << "の番です. (行 列)で入力してください: ";
            std::cin >> row >> col;

            row -= 1;
            col -= 1;

            if (row >= 0 && row < BOARD_SIZE && col >= 0 && col < BOARD_SIZE && board.isValidMove(row, col, currentPlayer)) {
                board.makeMove(row, col, currentPlayer);
                currentPlayer = (currentPlayer == BLACK) ? WHITE : BLACK;
            }
            else {
                message = "無効な手です. もう一度打ってください";
            }
        }
        else {
            currentPlayer = (currentPlayer == BLACK) ? WHITE : BLACK;
        }
    }

    void cpuTurn() {
        if (board.hasValidMove(currentPlayer)) {
            auto validMoves = board.getValidMoves(currentPlayer);
            if (!validMoves.empty()) {
                int moveIndex = std::rand() % validMoves.size();
                auto move = validMoves[moveIndex];
                board.makeMove(move.first, move.second, currentPlayer);
            }
            currentPlayer = (currentPlayer == BLACK) ? WHITE : BLACK;
        }
        else {
            currentPlayer = (currentPlayer == BLACK) ? WHITE : BLACK;

            if (!board.hasValidMove(currentPlayer)) {
                gameEnded = true;
            }
        }
    }

    void printGameResult() const {
        int blackScore = board.countScore(BLACK);
        int whiteScore = board.countScore(WHITE);

        std::cout << "Final Score:" << std::endl;
        std::cout << "Black: " << blackScore << std::endl;
        std::cout << "White: " << whiteScore << std::endl;

        if (blackScore > whiteScore) {
            std::cout << "Player Black の勝利" << std::endl;
        }
        else if (whiteScore > blackScore) {
            std::cout << "Player White の勝利" << std::endl;
        }
        else {
            std::cout << "引き分け" << std::endl;
        }
    }

    void clearScreen() const {
#ifdef _WIN32
        std::system("cls");
#else
        std::system("clear");
#endif
    }

    Board board;
    Mode mode;
    char currentPlayer;
    bool gameEnded;
    std::string message;
};

int main() {
    OthelloGame game;
    game.play();
    return 0;
}
